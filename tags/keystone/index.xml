<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Keystone on Chmouel&#39;s blog</title>
    <link>https://blog.chmouel.com/tags/keystone/</link>
    <description>Recent content in Keystone on Chmouel&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 14 Jun 2013 15:46:19 +0000</lastBuildDate>
    <atom:link href="https://blog.chmouel.com/tags/keystone/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How to launch the Swift functional test suite with Keystone</title>
      <link>https://blog.chmouel.com/2013/06/14/how-to-launch-the-swift-functional-test-suite-with-keystone/</link>
      <pubDate>Fri, 14 Jun 2013 15:46:19 +0000</pubDate>
      <guid>https://blog.chmouel.com/2013/06/14/how-to-launch-the-swift-functional-test-suite-with-keystone/</guid>
      <description>It is easy to launch the swift functional tests with v2 auth (Keystone).
Assuming you have a recent version of python-swiftclient, python-keystoneclient and swift you need to first add a few users which is easily done with this script :
Assuming you have already your OS_* variables configured with an admin, you can just launch it and it will :
add a tenant/user named test/tester. add a tenant/user name test2/tester2. add a user tester3 belonging to test2 but not operator on that tenant.</description>
    </item>
    <item>
      <title>Keystone and PKI tokens overview</title>
      <link>https://blog.chmouel.com/2013/05/02/keystone-pki-tokens-overview/</link>
      <pubDate>Thu, 02 May 2013 08:00:15 +0000</pubDate>
      <guid>https://blog.chmouel.com/2013/05/02/keystone-pki-tokens-overview/</guid>
      <description>PKI tokens has been implemented in keystone by [Adam Young][1] and others and was shipped for the OpenStack grizlly release. It is available since the version 2.0 API of keystone.
PKI is a beautiful acronym to [Public-key infrastructure][2] which according to wikipedia defines it like this :
Public-key cryptography is a cryptographic technique that enables users to securely communicate on an insecure public network, and reliably verify the identity of a user via digital signatures.</description>
    </item>
    <item>
      <title>Swift and Keystone middleware</title>
      <link>https://blog.chmouel.com/2011/11/24/swift-and-keystone-middleware-part1/</link>
      <pubDate>Thu, 24 Nov 2011 09:20:39 +0000</pubDate>
      <guid>https://blog.chmouel.com/2011/11/24/swift-and-keystone-middleware-part1/</guid>
      <description>[NB: Much things has changed since I have written this article but keeping it here for info]
It seems that integrating Swift and Keystone together present some challenges to people and this is absolutely normal as there is a lot of changes going on. This is my attempt to document how everything is plugged together.
I am not going to explain how a middleware is supposed to work as this is nicely documented on Wikipedia :</description>
    </item>
  </channel>
</rss>
